@use 'sass:math';
@use '../../../styles/const';
@use '../../../styles/utils';

:host {
  position: relative;
}

* {
  box-sizing: border-box;
}

// Reset default element styles.
button,
input {
  appearance: none;
  background: 0;
  border: 0;
  outline: 0;
}

button {
  block-size: const.$button-size;
  border-radius: math.div(const.$button-size, 2);
  color: var(--color-theme);
  cursor: pointer;
  display: grid;
  font-size: const.$amount-size;
  inline-size: const.$button-size;
  opacity: 1;
  outline: 0;
  padding: 0;
  place-content: center;
  white-space: nowrap;

  &:focus {
    background-color: var(--color-surface1);
  }

  &:active,
  &[aria-expanded='true'] {
    background-color: var(--color-surface2);
  }
}

@media (any-hover: hover) {
  button {
    transition: utils.transition(background-color);

    &:hover {
      background-color: var(--color-surface1);
    }

    &[aria-expanded='true']:hover {
      background-color: var(--color-surface2);
    }
  }
}

// Currency symbol for button and options.
:is(button, li) > span {
  pointer-events: none;
}

// Currency menu.
form {
  background-color: var(--color-surface2);
  border-radius: 2rem;
  inset-block: (const.$button-size + const.$menu-spacing) auto;
  inset-inline: (- const.$menu-spacing) auto;
  position: absolute;
  transform: translateY(.25rem);
  transition: utils.transition(opacity, transform);
}

form[aria-hidden='true'] {
  opacity: 0;
  pointer-events: none;
  transform: translateY(-.25rem);
}

// Currency options via list of radio buttons.
ul {
  display: flex;
  gap: const.$menu-spacing;
  list-style: none;
  margin: 0;
  padding: const.$menu-spacing;
}

// Stack each list item's children on top of each other.
li {
  display: inline-grid;
  font-size: 1.5rem;
  grid: 1fr / 1fr;
  place-items: center;
}

li > * {
  grid-area: 1 / 1 / -1 / -1;
}

// Radio buttons styled as discs.
input {
  background-color: var(--color-surface1);
  block-size: const.$button-size;  
  border: 3px solid var(--color-on-surface-variant);
  border-radius: math.div(const.$button-size, 2);
  cursor: pointer;
  display: block;
  inline-size: const.$button-size;
  margin: 0;

  &:focus,
  &:active {
    border-color: var(--color-on-surface);
  }

  &:checked {
    border-color: var(--color-theme);
  }

  // Currency symbol.
  &:checked + span {
    color: var(--color-theme);
  }
}

@media (any-hover: hover) {
  input {
    transition: utils.transition(border-color);

    &:hover {
      border-color: var(--color-on-surface);
    }

    &:hover:checked {
      border-color: var(--color-theme);
    }
  }

  input + span {
    transition: utils.transition(color);
  }
}
