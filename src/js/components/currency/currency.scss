@use 'sass:math';
@use '../../../styles/const';

// Component constants.
$button-size: 2.75rem;
$swatch-size: 2.75rem;

:host {
  position: relative;
  z-index: 1;
}

* {
  box-sizing: border-box;
}

// Reset default element styles.
button,
input {
  -webkit-appearance: none;
  appearance: none;
  background: 0;
  border: 0;
  outline: 0;
}

button {
  block-size: $button-size;
  border-radius: math.div($button-size, 2);
  color: var(--color-theme);
  cursor: pointer;
  display: grid;
  font-size: 2rem;
  inline-size: $button-size;
  opacity: 1;
  place-content: center;

  &:focus {
    background-color: var(--color-surface2);
  }

  &[aria-expanded='true'] {
    background-color: var(--color-theme);
    color: var(--color-on-theme);
  }
}

// Currency symbol for button and options.
:is(button, li) > span {
  pointer-events: none;
}

// Currency menu.
form {
  backdrop-filter: blur(5px);
  background-color: var(--color-surface2);
  border-radius: 2rem;
  inset-block: auto $button-size;
  inset-inline: 0 auto;
  opacity: 1;
  position: absolute;
  transform: translate3d(-.375rem, -.375rem, 0);
  transition: opacity .2s ease-out, transform .2s ease-out;
}

form[aria-hidden='true'] {
  opacity: 0;
  pointer-events: none;
  transform: translate3d(-.375rem, .5rem, 0);
}

// Currency options via list of radio buttons.
ul {
  display: flex;
  gap: .375rem;
  list-style: none;
  margin: 0;
  padding: .375rem;
}

// Stack each list item's children on top of each other.
li {
  display: inline-grid;
  font-size: 1.5rem;
  grid: 1fr / 1fr;
  place-items: center;
}

li > * {
  grid-area: 1 / 1 / -1 / -1;
}

// Radio buttons styled as discs.
input {
  background-color: var(--color-surface1);
  block-size: $swatch-size;  
  border-radius: math.div($swatch-size, 2);
  border: 3px solid var(--color-surface2);
  cursor: pointer;
  display: block;
  inline-size: $swatch-size;
  margin: 0;
}

input:focus {
  border-color: var(--color-on-surface-variant);
}

input:checked {
  border-color: var(--color-theme);
}

input:checked + span {
  color: var(--color-theme);
}

@media (any-hover: hover) {
  button {
    transition: background-color .2s;

    &:hover {
      background-color: var(--color-surface2);
    }

    &[aria-expanded='true'] {
      background-color: var(--color-theme);
      color: var(--color-on-theme);
    }
  }

  input {
    transition: border-color .2s;

    &:hover {
      border-color: var(--color-on-surface-variant);
    }
  }

  input + span {
    transition: color .2s;
  }
}