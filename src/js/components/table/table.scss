@use 'sass:map';
@use '../../../styles/const';
@use '../../../styles/utils';

:host {
  display: block;
  --zebra-stripe: #{mix(black, utils.map-deep-get(const.$grays, 6, light), 3%)};

  @media (prefers-color-scheme: dark) {
    --zebra-stripe: #{mix(white, utils.map-deep-get(const.$grays, 6, dark), 3%)};
  }
}

* {
  box-sizing: border-box;
}

// Scrollable wrapper for <table> element.
div {
  overflow: auto hidden;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }

  @media #{map.get(const.$breakpoint, 'small')} {
    border-radius: const.$card-radius;
  }
}

// Standard <table> element.
table {
  border-collapse: collapse;
  font-size: clamp(.8125rem, .8125rem + 1vw, 1rem);
  font-variant-numeric: tabular-nums;
  inline-size: 100%;

  @media #{map.get(const.$breakpoint, 'small')} {
    background-color: var(--surface);
  }
}

// All cells are end-aligned by default since they contain numeric content.
:is(th, td) {
  padding-block: .5rem;
  padding-inline: 1rem;
  text-align: end;
  white-space: nowrap;
}

// Make first column start-aligned.
:is(th, td):first-child {
  text-align: start;
}

// Table headers.
th {
  font-variation-settings: 'wght' 600;
}

// Alternating row backgrounds.
tbody > tr:nth-child(odd) {
  background-color: var(--zebra-stripe);
}

// Only show 'growth' and 'interest' columns when the viewport is wide enough.
:is(.growth, .interest) {
  display: none;

  @media #{map.get(const.$breakpoint, 'small')} {
    display: table-cell;
  }
}

// Currency and percent symbols via pseudo-elements.
:is(td.balance, td.deposits, td.interest)::before {
  color: var(--on-surface-variant);
  margin-inline: 0 .25em;

  [data-currency='eur'] & { content: '€' }
  [data-currency='gbp'] & { content: '£' }
  [data-currency='inr'] & { content: '₹' }
  [data-currency='usd'] & { content: '$' }
  [data-currency='yen'] & { content: '¥' }
}

td.growth::after {
  color: var(--on-surface-variant);
  content: '%';
  margin-inline: .25em 0;
}

// Footnote after the table.
p {
  color: var(--on-surface-variant);
  display: none;
  font-size: .75rem;
  margin-block: 1rem 0;
  margin-inline: 1rem;

  @media #{map.get(const.$breakpoint, 'small-portrait')} {
    display: block;
  }
}

p > span {
  color: var(--on-surface);
}
