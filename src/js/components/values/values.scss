@use 'sass:map';
@use 'sass:math';
@use '../../../styles/const';
@use '../../../styles/utils';

:host {
  display: grid;
  grid: 'widget' 4rem 'values' 'total' 6rem / 1fr;
  inline-size: 100%;
  margin-inline: env(safe-area-inset-left) env(safe-area-inset-right);
  max-inline-size: const.$values-max-size;
}

* {
  box-sizing: border-box;
}

:is(form, ul, li, .total) {
  display: grid;
}

:is(ul, li) {
  gap: const.$field-gap;
}

:is(form, ul) {
  grid: auto-flow / 1fr;
}

form {
  align-self: center;
  gap: 2rem 0;
  grid-area: values;
  padding-inline: const.$card-padding;
}

[role='list'] {
  list-style: none;
  margin: 0;
  padding: 0;
}

li {
  align-items: center;
  grid: 'input label' / 1fr 1fr;
}

label {
  grid-area: label;
  line-height: 1;
  min-inline-size: 8rem;
  opacity: .8;
  pointer-events: none;
  white-space: nowrap;
}

label[for='rate']::before {
  content: '% ';
}

input {
  appearance: none;
  background-color: var(--surface2);
  block-size: const.$input-block-size;
  border: const.$outline-size solid var(--surface);
  border-radius: const.$input-radius;
  box-sizing: content-box;
  color: var(--on-surface);
  font-family: 'Avenir Variable', sans-serif;
  font-size: 1em;
  font-variation-settings: 'wght' 500;
  grid-area: input;
  inline-size: const.$field-input-size;
  justify-self: end;
  line-height: 1;
  margin: 0;
  outline: 0;
  padding-inline: const.$input-padding;
  text-align: end;

  &:focus {
    border-color: var(--outline);
  }

  &:invalid {
    color: var(--color-error);
  }
}

.total {
  color: var(--theme);
  font-size: 2.75rem;
  grid-area: total;
  line-height: 1;
  max-inline-size: 100%;
  overflow: scroll hidden;
  padding-inline: const.$card-padding;
  place-self: center;
  scrollbar-width: none;
  text-align: center;
  transition: utils.transition(opacity);

  &::-webkit-scrollbar {
    display: none;
  }
}

[aria-hidden='true'] {
  opacity: 0;
  visibility: hidden;
}

app-currency {
  grid-area: widget;
  margin-inline: auto .75rem;
  place-self: center end;
  transition: utils.transition(opacity);
}

@media #{map.get(const.$breakpoint, 'small')} {
  :host {
    background-color: var(--surface);
    border-radius: const.$card-radius;
  }

  [role='list'] {
    grid: auto-flow / 1fr 1fr;
  }

  li:nth-child(odd) {
    place-self: end;
  }

  li:nth-child(even) {
    place-self: start;
  }
}

@media #{map.get(const.$breakpoint, 'medium')} {
  :host {
    max-inline-size: none;
  }

  [role='list'] {
    grid: auto-flow / 1fr;
  }

  li:nth-child(n) {
    place-self: center;
  }
}
